#!/usr/bin/env python3
import click
import sqlite3

@click.command()
@click.option('--instrument', prompt='Instrument', type=str,
              help='Instrument used for the trade.')
@click.option('--date', prompt='Date', type=str,
              help='Date of the trade.')
@click.option('--position_size', prompt='Position size', type=float,
              help='Position size of the trade.')
@click.option('--entry_price', prompt='Entry price', type=float,
              help='Entry price of the instrument.')
@click.option('--target_price', prompt='Target price', type=float,
              help='Target price of the instrument.')
@click.option('--bid_price', prompt='Bid price', type=float,
              help='Bid price of the instrument.')
@click.option('--atr', prompt='ATR', type=float,
              help='ATR of the instrument at entry time.')
@click.option('--subscription_ratio', prompt='Subscription ratio', type=float,
              help='Subscription ratio of the instrument, if relevant.')
@click.option('--knock_out', prompt='Knock out threshold', type=float,
              help='Knock-out threshold of the instrument, if relevant.')
@click.option('--multiplicator', prompt='Multiplicator', type=float,
              help='Multiplicator of the instrument, if relevant.')
@click.option('--strike_price', prompt='Strike_price', type=float,
              help='Strike price of the instrument, if relevant.')
@click.option('--entry_underlying_price', prompt='Entry underlying price', type=float,
              help='Underlying price at entry, if relevant.')
@click.option('--entry_signal', prompt='Trade entry signal', type=str,
              help='Signal for trade entry.')
@click.option('--exit_signal', prompt='Trade exit signal', type=str,
              help='Signal for trade exit.')
@click.option('--comment', prompt='Comment', type=str,
              help='Comment on the success/failure of the trade.')


def insert_in_db(instrument, date, position_size, entry_price, target_price, bid_price, atr, subscription_ratio, knock_out, multiplicator, strike_price, entry_underlying_price, entry_signal, exit_signal, comment):
    # canculate target price of product's underlying
    target_underlying_price = (target_price) * (multiplicator) * (strike_price)
    # calculate initial stop (atr factor = 2)
    initial_stop = (entry_price) - (atr * 2)
    # calculate risk per stock
    risk_per_stock = entry_price - initial_stop
    # calculate risk/reward ratio
    risk_reward_ratio = (target_price - entry_price) - risk_per_stock
    # calculate buying sum
    buying_sum = position_size * entry_price
    # calculate profit of trade
    trade_profit = position_size * (target_price - bid_price)

    try:
        sqliteConnection = sqlite3.connect('traders_journal.db')
        cursor = sqliteConnection.cursor()
        variables = (instrument, date, buying_sum, position_size, trade_profit, risk_reward_ratio, entry_price, target_price, bid_price, atr, subscription_ratio, knock_out, multiplicator, strike_price, entry_underlying_price, target_underlying_price, initial_stop, risk_per_stock, entry_signal, exit_signal, comment,)
        sql = '''INSERT INTO journal(instrument, date, buying_sum, position_size, trade_profit, risk_reward_ratio, entry_price, target_price, bid_price, atr, subscription_ratio, knock_out, multiplicator, strike_price, entry_underlying_price, target_underlying_price, initial_stop, risk_per_stock, entry_signal, exit_signal, comment) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)'''
        cursor.execute(sql, variables)
        sqliteConnection.commit()
        count = cursor.rowcount
        print(count, "Record inserted successfully into journal")
    except sqlite3.Error as error:
        print("Failed to insert record into journal", error)
    finally:
        if (sqliteConnection):
            cursor.close()
            sqliteConnection.close()
            print("The SQLite connection is closed")


if __name__ == '__main__':
    insert_in_db()